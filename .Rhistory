lrn = makeLearner("classif.rknn", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
}
scorePrediction('SVM',train,test,'label')
scorePrediction('kNN',train,test,'label')
scorePrediction('knn',train,test,'label')
installed.packages('rknn')
library('rknn')
library(rknn)
library('rknn')
library(rknn)
installed.packages('rknn')
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScore", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
}
scorePrediction('naiveBayes',train,test,'label')
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScor", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newdata.pred)
return(pred)
}
}
scorePrediction('naiveBayes',train,test,'label')
task = makeClassifTask(id = "stemScore", data = train, target = "label", positive = 1)
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = test)
pred = as.data.frame(newdata.pred)
pred
task = makeClassifTask(id = "stemScore", data = train, target = "label", positive = 1)
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = test)
pred = as.data.frame(newdata.pred)
pred
newData.pred
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScor", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
mod = train(lrn, task)
newData.pred = predict(mod, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
}
scorePrediction('naiveBayes',train,test,'label')
scorePrediction('SVM',train,test,'label')
readMatrix('data/prediction.csv')
prediction = readMatrix('data/prediction.csv')
scorePrediction('SVM',train,prediction,'label')
summary(mod)
install.packages('princomp')
library('princomp')
install.packages('prcomp')
train.pca<-princomp(train[,1:13190],cor=T,scores=T)
train[,1:13190]
train.pca<-prcomp(train[,-2],scale=T,rank=4,retx=T)
summary(train.pca)
library(ggbiplot)
ggbiplot(train.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
install.packages('ggbiplot')
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(train.pca, obs.scale = 1, var.scale = 1,
groups = train['label'], ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(train.pca, obs.scale = 1, var.scale = 1,
+, ellipse = TRUE, circle = TRUE) +
+     scale_color_discrete(name = '') +
+     theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(train.pca, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) +
+     scale_color_discrete(name = '') +
+     theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(train.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
plot(train.pca)
install.packages(factoextra)
install.packages('factoextra')
install.packages("factoextra")
library(factoextra)
fviz_pca_ind(train.pca,
geom.ind = "point",
col.ind = train['label']
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train[label], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train['label'], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
install.packages('tibble')
install.packages("tibble")
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train['label'], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
library(factoextra)
fviz_pca_ind(train.pca,
+              geom.ind = "point", # show points only (nbut not "text")
+              col.ind = train['label'], # color by groups
+              palette = "jco",
+              addEllipses = TRUE, # Concentration ellipses
+              legend.title = "Groups"
+ )
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train['label'], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
install.packages('tibble')
install.packages("tibble")
install.packages(factoextra)
install.packages('factoextra')
install.packages('tibble')
library(factoextra)
fviz_pca_ind(train.pca, geom.ind = "point", # show points only (nbut not "text") col.ind = train['label'], # color by groups palette = "jco", addEllipses = TRUE, # Concentration ellipses legend.title = "Groups" )
fviz_pca_ind(train.pca, geom.ind = "point", # show points only (nbut not "text") col.ind = train['label'], # color by groups palette = "jco", addEllipses = TRUE, # Concentration ellipses legend.title = "Groups" )
fviz_pca_ind(train.pca, geom.ind = "point", # show points only (nbut not "text") col.ind = train['label'], # color by groups palette = "jco", addEllipses = TRUE, # Concentration ellipses legend.title = "Groups" )
fviz_pca_ind(train.pca, geom.ind = "point", # show points only (nbut not "text") col.ind = train['label'], # color by groups palette = "jco", addEllipses = TRUE, # Concentration ellipses legend.title = "Groups" )
fviz_pca_ind(train.pca, geom.ind = "point", # show points only (nbut not "text") col.ind = train['label'], # color by groups palette = "jco", addEllipses = TRUE, # Concentration ellipses legend.title = "Groups" )
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train['label'], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = test['label'], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train.pca <- PCA(train, graph = FALSE)
library(FactoMineR)
train.pca <- PCA(train, graph = FALSE)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train['label'], # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train.class = train['label']
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train.class, # color by groups
palette = "jco",
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train.class, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
#col.ind = train.class, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train.pca
train.class
datasets(iris)
datasets::iris
iris$Species
train$label
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train$label, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(iris.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
iris.PCA <- PCA(iris,graph=FALSE)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train$label, # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train$label, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train$label=as.numeric(levels(train$label))[train$label]
View(train.pca)
train$label=as.numeric(levels(train$label))[train$label]
levels(train$label)
scale_x_continuous(train$label)
train$label = scale_x_continuous(train$label)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = train$label, # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = black, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train$label
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = 'blue', # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
habillage = train$label, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
p <- fviz_pca_ind(train.pca, label="none", habillage=train$label)
train['label']
for (i in seq_along(train$label)){
print(i)
}
for (i in seq_along(train$label)){
print(train$label[i])
}
label = c()
for (i in seq_along(train$label)){
if (train$label == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
label
label = c()
for (i in seq_along(train$label)){
if (train$label[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
label
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind=label, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train.pca <- FactoMineR:PCA(train, graph = FALSE)
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
predictSet.pca <- FactoMineR::PCA(train, graph = FALSE)
scorePrediction('SVM',train,test,'label')
library(mlr)
scorePrediction('SVM',train,test,'label')
prediction = scorePrediction('SVM',train,test,'label')
prediction$response
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
fviz_pca_ind(train.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
PCAVisualization(test,prediction)
test.shape
test
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
fviz_pca_ind(predictSet.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
PCAVisualization(test,prediction)
train = readMatrix('data/train.csv')
test = readMatrix('data/test.csv')
rm(list = ls())
library(scoreStem)
train = readMatrix('data/train.csv')
test = readMatrix('data/test.csv')
library(ScoreStem)
train = readMatrix('data/train.csv')
test = readMatrix('data/test.csv')
prediction = scorePrediction('SVM',train,test,'label')
PCAVisualization = (test,prediction)
PCAVisualization(test,prediction)
install.packages("roxygen2")
library("roxygen2")
roxygenise()
roxygenise()
roxygenise()
devtools::document()
roxygenise()
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScor", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
else {
print('Input algorithm is not supported.')
}
}
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
factoextra::fviz_pca_ind(predictSet.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
roxygenise()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
importFrom("e1071","impute")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?stemScore
??stemScore
?PCAVisualization
devtools::document()
?PCAVisualization
?readM
?readMatrix
devtools::document()
?readMatrix
readMatrix('inst/extdata/test.csv')
devtools::document()
?PCAVisualization
?scorePrediction
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
PCAVisualization()
data.frame()
test=data.frame()
prediction = data.frame
PCAVisualization(test,prediction)
test=list()
prediction = list()
PCAVisualization(test,prediction)
test=list(gene1 = 1, gene2 = 2, gene3 = 3)
prediction = list(prob1 = 1, prob0=0, response = 1)
PCAVisualization(test,prediction)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
