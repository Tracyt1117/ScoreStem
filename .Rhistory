geom.ind = "point", # show points only (nbut not "text")
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = black, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train$label
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = 'blue', # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
habillage = train$label, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
p <- fviz_pca_ind(train.pca, label="none", habillage=train$label)
train['label']
for (i in seq_along(train$label)){
print(i)
}
for (i in seq_along(train$label)){
print(train$label[i])
}
label = c()
for (i in seq_along(train$label)){
if (train$label == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
label
label = c()
for (i in seq_along(train$label)){
if (train$label[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
label
fviz_pca_ind(train.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind=label, # color by groups
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
train.pca <- FactoMineR:PCA(train, graph = FALSE)
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
predictSet.pca <- FactoMineR::PCA(train, graph = FALSE)
scorePrediction('SVM',train,test,'label')
library(mlr)
scorePrediction('SVM',train,test,'label')
prediction = scorePrediction('SVM',train,test,'label')
prediction$response
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
fviz_pca_ind(train.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
PCAVisualization(test,prediction)
test.shape
test
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
fviz_pca_ind(predictSet.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
PCAVisualization(test,prediction)
train = readMatrix('data/train.csv')
test = readMatrix('data/test.csv')
rm(list = ls())
library(scoreStem)
train = readMatrix('data/train.csv')
test = readMatrix('data/test.csv')
library(ScoreStem)
train = readMatrix('data/train.csv')
test = readMatrix('data/test.csv')
prediction = scorePrediction('SVM',train,test,'label')
PCAVisualization = (test,prediction)
PCAVisualization(test,prediction)
install.packages("roxygen2")
library("roxygen2")
roxygenise()
roxygenise()
roxygenise()
devtools::document()
roxygenise()
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScor", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
else {
print('Input algorithm is not supported.')
}
}
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
factoextra::fviz_pca_ind(predictSet.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
roxygenise()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
importFrom("e1071","impute")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?stemScore
??stemScore
?PCAVisualization
devtools::document()
?PCAVisualization
?readM
?readMatrix
devtools::document()
?readMatrix
readMatrix('inst/extdata/test.csv')
devtools::document()
?PCAVisualization
?scorePrediction
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
PCAVisualization()
data.frame()
test=data.frame()
prediction = data.frame
PCAVisualization(test,prediction)
test=list()
prediction = list()
PCAVisualization(test,prediction)
test=list(gene1 = 1, gene2 = 2, gene3 = 3)
prediction = list(prob1 = 1, prob0=0, response = 1)
PCAVisualization(test,prediction)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
require("devtools")
devtools::install_github("Tracyt1117/ScoreStem", build_vignettes = FALSE)
devtools::install_github("Tracyt1117/scoreStem", build_vignettes = FALSE)
devtools::install_github("Tracyt1117/scoreStem", build_vignettes = FALSE)
library(ScoreStem)
readMatrix <- function(dir) {
matrix <- read.csv(dir)
return(matrix)
}
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
library(mlr)
#' readMatrix
#'
#' Read data for training
#'
#' @param dir the path of the matrix to be read
#'
#' @return list object of the read matrix
#' @export
#'
readMatrix <- function(dir) {
matrix <- read.csv(dir)
return(matrix)
}
#' scorePrediction
#'
#' Predict the stemscore of predictSet with trainSet and selected machine learning algorithm.
#'
#' @param algorithm the algorithm used for learning. 'SVM','randomForest','naiveBayes' are supported.
#' @param trainSet the data for training. With stem state labelled.
#' @param predictSet the data for predictiton.
#' @param target the label column of the trainSet
#'
#' @return prediction result in the form of list
#' @export
#'
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScor", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
else {
print('Input algorithm is not supported.')
}
}
#' PCAVisualization
#'
#' Visualize the prediction result with PCA to check if the predicted stem cell can be distinguished from non-stem cell.
#'
#' @param predictSet Data for stemscore prediction.
#' @param predictResult The result from scorePrediction function
#'
#' @return a plot of PCA dimentional reduction
#' @export
#'
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
factoextra::fviz_pca_ind(predictSet.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
readMatrix('data/test.csv')
test = readMatrix('data/test.csv')
save(test,'test.RData')
save(test,file='test.RData')
scorePrediction('SVM',trainSet = test, predictSet = test, targer='label')
scorePrediction('SVM',trainSet = test, predictSet = test, target='label')
prediction = scorePrediction('SVM',trainSet = test, predictSet = test, target='label')
PCAVisualization(test,prediction)
PCAVisualization(test,prediction)
test[10300]
test10399[]
test[10327]
test[10328]
test[10350]
test[10380]
test[10399]
test[11000]
test[20000]
test[15000]
test[13000]
test[14000]
test[13666]
test[13222]
test[13027]
test[13028]
[test13100]
test[13100]
test[13166]
test[13188]
test[13200]
test[31290]
test[13290]
test[13288]
test[13280]
test[13190]
test[13200]
test[13196]
test[13193]
test[13191]
test[13190]
PCAVisualization(test[1:13190],prediction)
load('.RData')
vignette("rd")
load('test.RData')
scorePrediction('SVM',trainSet = test, predictSet = test, target='label')
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
library(mlr)
#' @import mlr randomForest e1071 FactoMineR factoextra
NULL
#' readMatrix
#'
#' Read data for training
#'
#' @param dir the path of the matrix to be read
#'
#' @return list object of the read matrix
#' @export
#'
readMatrix <- function(dir) {
matrix <- read.csv(dir)
return(matrix)
}
#' scorePrediction
#'
#' Predict the stemscore of predictSet with trainSet and selected machine learning algorithm.
#'
#' @param algorithm the algorithm used for learning. 'SVM','randomForest','naiveBayes' are supported.
#' @param trainSet the data for training. With stem state labelled.
#' @param predictSet the data for predictiton.
#' @param target the label column of the trainSet
#'
#' @return prediction result in the form of list
#' @export
#' @examples
#' load('test.RData')
#' scorePrediction('SVM',trainSet = test, predictSet = test, target='label')
#'
scorePrediction <- function(algorithm, trainSet, predictSet,target){
task = makeClassifTask(id = "stemScore", data = trainSet, target = target, positive = 1)
if (algorithm == 'randomForest') {
lrn = makeLearner("classif.randomForest", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'SVM') {
lrn = makeLearner("classif.svm", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
if (algorithm == 'naiveBayes') {
lrn = makeLearner("classif.naiveBayes", predict.type = "prob", fix.factors.prediction = TRUE)
model = train(lrn, task)
newData.pred = predict(model, newdata = predictSet)
pred = as.data.frame(newData.pred)
return(pred)
}
else {
print('Input algorithm is not supported.')
}
}
#' PCAVisualization
#'
#' Visualize the prediction result with PCA to check if the predicted stem cell can be distinguished from non-stem cell.
#'
#' @param predictSet Data for stemscore prediction.
#' @param predictResult The result from scorePrediction function
#'
#' @return a plot of PCA dimentional reduction
#' @export
#' @examples
#' load('test.RData')
#' prediction = scorePrediction('SVM',trainSet = test, predictSet = test, target='label')
#' PCAVisualization(test[1:13190],prediction)
#'
PCAVisualization <- function(predictSet, predictResult){
predictSet.pca <- FactoMineR::PCA(predictSet, graph = FALSE)
label = c()
for (i in seq_along(predictResult$response)){
if (predictResult$response[i] == 1){
label <- c(label,'Stem')
}
else {
label <- c(label,'NonStem')
}
}
factoextra::fviz_pca_ind(predictSet.pca,
geom.ind = "point",
col.ind=label,
addEllipses = TRUE,
legend.title = "Groups"
)
}
load('test.RData')
load('data/test.RData')
load('data/test.RData')
scorePrediction('SVM',trainSet = test, predictSet = test, target='label')
usethis::use_vignette("ScoreStem")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ScoreStem)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ScoreStem)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ScoreStem)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ScoreStem)
load('test.RData')
load('data/test.RData')
load('data/test.RData')
load('inst/extdata/test.RData')
load('inst/extdata/test.RData')
load('../inst/extdata/test.RData')
scorePrediction <- function(algorithm='SVM',trainSet = test, predictSet = test, target='label')
load('../inst/extdata/test.RData')
prediction = scorePrediction(algorithm='SVM',trainSet = test, predictSet = test, target='label')
load('../inst/extdata/test.RData')
prediction = scorePrediction(algorithm='SVM',trainSet = test, predictSet = test, target='label')
PCAVisualization(test[1:13190],prediction)
usethis::use_testthat()
use_test()
usethis::use_test()
usethis::use_testthat()
usethis::use_test()
load('../data/test.RData')
load('data/test.RData')
